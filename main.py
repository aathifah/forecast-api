# -*- coding: utf-8 -*-
"""main

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mSOpPk7Np7k9JmQa5LyUkjixpPNqvuch
"""

from fastapi import FastAPI, UploadFile, File, HTTPException, BackgroundTasks
from fastapi.responses import FileResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
import shutil
import os
import pandas as pd
import numpy as np
import base64
import requests
from model_testing import run_combined_forecast
from model_realtime import run_real_time_forecast

app = FastAPI()

# CORS Middleware setup
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

UPLOAD_FOLDER = "uploads"
OUTPUT_TESTING = os.path.join(UPLOAD_FOLDER, "testing_forecast.xlsx")
OUTPUT_REALTIME = os.path.join(UPLOAD_FOLDER, "Forecast_Result.xlsx")
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# === KONFIGURASI GITHUB ===
import requests
import base64

# === KONFIGURASI GITHUB ===
GITHUB_TOKEN = "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"  # Token GitHub kamu
GITHUB_REPO = "aathifah/forecast-api"                      # Format: username/repo
GITHUB_BRANCH = "main"                                     # Nama branch
GITHUB_FILEPATH = "uploads/testing_forecast.xlsx"          # Path file di repo GitHub

def upload_file_to_github(filepath_local, github_repo, github_path, branch="main"):
    """
    Mengunggah atau memperbarui file ke GitHub menggunakan GitHub API.
    """
    with open(filepath_local, "rb") as f:
        content = f.read()
    content_b64 = base64.b64encode(content).decode()

    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }

    # Cek apakah file sudah ada (untuk ambil SHA jika mau update)
    url_get = f"https://api.github.com/repos/{github_repo}/contents/{github_path}"
    r = requests.get(url_get, headers=headers)
    if r.status_code == 200:
        sha = r.json()["sha"]  # file exists, update mode
    else:
        sha = None  # file doesn't exist, create new

    data = {
        "message": "Update forecast result via API",
        "content": content_b64,
        "branch": branch,
    }
    if sha:
        data["sha"] = sha  # diperlukan untuk update

    # Upload atau update file
    url_put = f"https://api.github.com/repos/{github_repo}/contents/{github_path}"
    r = requests.put(url_put, json=data, headers=headers)

    if r.status_code in [200, 201]:
        print(f"‚úÖ File berhasil diupload ke GitHub: {github_path}")
        return True
    else:
        print(f"‚ùå Gagal upload file ke GitHub: {r.status_code}")
        print(f"Detail: {r.text}")
        raise Exception(f"GitHub upload failed: {r.text}")

@app.post("/run-testing-forecast/")
async def run_testing_forecast(file: UploadFile = File(...), background_tasks: BackgroundTasks = BackgroundTasks()):
    try:
        input_path = os.path.join(UPLOAD_FOLDER, file.filename)
        with open(input_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        print(f"üìÅ File berhasil diupload: {input_path}")

        def forecast_and_upload():
            run_combined_forecast(input_path)
            # Upload hasil forecast ke GitHub jika file ada dan tidak kosong
            if os.path.exists(OUTPUT_TESTING) and os.path.getsize(OUTPUT_TESTING) > 0:
                upload_file_to_github(
                    filepath_local=OUTPUT_TESTING,
                    github_repo=GITHUB_REPO,
                    github_path=GITHUB_FILEPATH,
                    branch=GITHUB_BRANCH
                )
            else:
                print("‚ùå File forecast tidak ditemukan atau kosong, tidak diupload ke GitHub.")

        background_tasks.add_task(forecast_and_upload)

        return JSONResponse(
            content={
                "message": "‚è≥ Forecast sedang diproses dan akan diupload ke GitHub.",
                "status": "processing"
            },
            status_code=202
        )
    except Exception as e:
        print(f"‚ùå Error saat forecasting: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/forecast-result/")
def get_forecast_result():
    if os.path.exists(OUTPUT_TESTING) and os.path.getsize(OUTPUT_TESTING) > 0:
        return FileResponse(
            OUTPUT_TESTING,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            filename="testing_forecast.xlsx"
        )
    else:
        raise HTTPException(status_code=404, detail="File forecast belum tersedia atau kosong.")


@app.get("/check-forecast-status/")
def check_forecast_status():
    if os.path.exists(OUTPUT_TESTING):
        size_kb = os.path.getsize(OUTPUT_TESTING) / 1024
        return {"exists": True, "size_kb": round(size_kb, 2)}
    else:
        return {"exists": False}


@app.get("/run-real-time-forecast/")
def run_realtime():
    if not os.path.exists(OUTPUT_TESTING):
        raise HTTPException(
            status_code=400,
            detail="File 'testing_forecast.xlsx' belum tersedia. Jalankan /run-testing-forecast/ dulu."
        )
    try:
        run_real_time_forecast(forecast_file=OUTPUT_TESTING)

        return FileResponse(
            OUTPUT_REALTIME,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            filename="Forecast_Result.xlsx"
        )
    except Exception as e:
        print(f"‚ùå Error saat realtime forecast: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/")
def root():
    print("‚úÖ Endpoint root berhasil diakses")
    return {"message": "‚úÖ FastAPI Forecast API is running"}


@app.on_event("startup")
def on_startup():
    print("üöÄ FastAPI berhasil start di Railway")
