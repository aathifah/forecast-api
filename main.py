# -*- coding: utf-8 -*-
"""main

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mSOpPk7Np7k9JmQa5LyUkjixpPNqvuch
"""

from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
import shutil
import pandas as pd
import numpy as np
import os

from model_testing import run_combined_forecast
from model_realtime import run_real_time_forecast

app = FastAPI()

# üîì Mengizinkan akses dari semua domain (agar bisa dipakai di Excel / Power Automate)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Ganti jika ingin batasi akses
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

UPLOAD_FOLDER = "uploads"
OUTPUT_TESTING = os.path.join(UPLOAD_FOLDER, "testing_forecast.xlsx")
OUTPUT_REALTIME = os.path.join(UPLOAD_FOLDER, "Forecast_Result.xlsx")

# üìÅ Pastikan folder uploads tersedia
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.post("/run-testing-forecast/")
async def run_testing_forecast(file: UploadFile = File(...)):
    try:
        input_path = os.path.join(UPLOAD_FOLDER, file.filename)
        with open(input_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        print(f"üìÅ File berhasil diupload: {input_path}")
        run_combined_forecast(file_path=input_path)

        return FileResponse(
            OUTPUT_TESTING,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            filename="testing_forecast.xlsx",
            headers={"Content-Disposition": "attachment; filename=testing_forecast.xlsx"}
        )
    except Exception as e:
        print(f"‚ùå Error saat forecasting: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/run-real-time-forecast/")
def run_realtime():
    if not os.path.exists(OUTPUT_TESTING):
        raise HTTPException(
            status_code=400,
            detail="File 'testing_forecast.xlsx' belum tersedia. Jalankan /run-testing-forecast/ dulu."
        )
    try:
        run_real_time_forecast(forecast_file=OUTPUT_TESTING)

        return FileResponse(
            OUTPUT_REALTIME,
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            filename="Forecast_Result.xlsx",
            headers={"Content-Disposition": "attachment; filename=Forecast_Result.xlsx"}
        )
    except Exception as e:
        print(f"‚ùå Error saat realtime forecast: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/")
def root():
    print("‚úÖ Endpoint root berhasil diakses")
    return {"message": "‚úÖ FastAPI Forecast API is running"}

@app.on_event("startup")
def on_startup():
    print("üöÄ FastAPI berhasil start di Railway")
